{
    "YoY": {
        "description": "Directly relates to the measurement of growth, with specific reference to annual comparisons.",
        "calculation_guidelines": "- You must not use window functions to perform the calculations. \n- Use CTEs called this_year and last_year to calculate the YoY Growth and then join them to get the YoY Growth.",
        "calculation_example": "Example Input: What is the YoY sales on a weekly basis for the past 40 weeks?\nExample Output:\n```sql\n WITH processed_data AS (\n  SELECT\n    date_trunc(purchase_date, week(monday)) as week,\n    sum(gross_sales) as sales\n  FROM `danish-endurance-analytics.nl2sql.amazon_orders`    \n  GROUP BY week\n),\nthis_year AS (\n  SELECT\n    week,\n    sales\n  FROM processed_data\n  WHERE\n    week <> DATE_TRUNC(current_date(), week(monday))\n),\nlast_year AS (\n  SELECT\n    week,\n    sales\n  FROM processed_data\n)\nSELECT\n  this_year.week as this_year_week,\n  last_year.week as last_year_week,\n\n  this_year.sales as this_year_sales,\n  last_year.sales as last_year_sales,\nFROM this_year\nLEFT JOIN last_year\n  ON EXTRACT(ISOWEEK FROM this_year.week) = EXTRACT(ISOWEEK FROM last_year.week)\n  AND EXTRACT(ISOYEAR FROM this_year.week) = EXTRACT(ISOYEAR FROM last_year.week) + 1\nORDER BY this_year.week desc\nLIMIT 40\n```"
    },
    "WoW": {
        "description": "Measures the growth rate on a week-over-week basis.",
        "calculation_guidelines":"To calculate Week-over-Week user the following guidelines:\n- You must not use window functions (such as LAG() and LEAD()) to perform the calculations.\n- You must use CTEs to calculate the WoW Growth.\n- The final output should contain current week and the previous week's data and also the WoW Growth (comparasion between the weeks).\n- Use DATE_TRUNC with week(monday) instead of presenting week numbers.",
        "calculation_example": "Question Example: What was the WoW sales in 2024?\nExample Output:\nwith processed_data as (\n  SELECT\n    DATE_TRUNC(purchase_date, week(monday)) as week,\n    SUM(gross_sales) as sales\n  FROM danish-endurance-analytics.nl2sql.amazon_orders\n  WHERE EXTRACT(ISOYEAR FROM purchase_date) = 2024\n  GROUP BY week \n)\nSELECT\n  this_week.week as this_week,\n  last_week.week as last_week,\n\n  this_week.sales as this_week_sales,\n  last_week.sales as last_week_sales,\n\n  SAFE_DIVIDE(this_week.sales - last_week.sales, last_week.sales) WoW_Growth\nFROM processed_data this_week\nFULL JOIN processed_data last_week\n  ON this_week.week = DATE_ADD(last_week.week, interval 1 week)\nORDER BY this_week desc"
    },
    "MoM": {
        "description": "Measures the growth rate on a month-over-month basis.",
        "calculation_guidelines":"To calculate Month-over-Month user the following guidelines:\n- You must not use window functions to perform the calculations.\n- You must use CTEs to calculate the MoM Growth.\n- The final output should contain current month and the previous month's data and also the MoM Growth (comparasion between the months).\n- Use DATE_TRUNC with month instead of presenting month numbers.",
        "calculation_example": "Example Question: What was the MoM units sold for all the months in 2023?\nExample SQL Query:\nwith processed_data as (\n  SELECT\n    DATE_TRUNC(purchase_date, MONTH) as month,\n    SUM(units_sold) as units_sold\n  FROM danish-endurance-analytics.nl2sql.amazon_orders\n  WHERE EXTRACT(ISOYEAR FROM purchase_date) = 2023\n  GROUP BY month \n)\nSELECT\n  this_month.month as this_month,\n  last_month.month as last_month,\n\n  this_month.units_sold as this_month_units_sold,\n  last_month.units_sold as last_month_units_sold,\n\n  SAFE_DIVIDE(this_month.units_sold - last_month.units_sold, last_month.units_sold) MoM_Growth\nFROM processed_data this_month\nFULL JOIN processed_data last_month\n  ON this_month.month = DATE_ADD(last_month.month, interval 1 month)\nORDER BY this_month desc;"
    }
}